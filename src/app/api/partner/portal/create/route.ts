import { createRouteHandlerClient } from "@supabase/auth-helpers-nextjs"; import { cookies } from "next/headers"; import { NextRequest, NextResponse } from "next/server"; export async function POST(request) { try { const { portalName, subdomain, branding } = await request.json(); const supabase = createRouteHandlerClient({ cookies }); const { data: { user }, error: authError } = await supabase.auth.getUser(); if (authError || !user) { return NextResponse.json({ error: "Unauthorized" }, { status: 401 }); } const { data: partnerData, error: partnerError } = await supabase.from("partners").select("id").eq("user_id", user.id).single(); if (partnerError || !partnerData) { return NextResponse.json({ error: "Partner not found" }, { status: 404 }); } const finalSubdomain = subdomain || portalName.toLowerCase().replace(/[^a-z0-9]/g, "-").replace(/-+/g, "-").replace(/^-|-$/g, ""); const { data: updatedPartner, error: updateError } = await supabase.from("partners").update({ portal_active: true, portal_subdomain: finalSubdomain, primary_color: branding?.primaryColor || "#3B82F6" }).eq("id", partnerData.id).select().single(); if (updateError) { return NextResponse.json({ error: "Failed to create portal" }, { status: 500 }); } return NextResponse.json({ success: true, portal: { id: updatedPartner.id, name: portalName, subdomain: finalSubdomain, status: "published" } }); } catch (error) { return NextResponse.json({ error: "Internal server error" }, { status: 500 }); } }
